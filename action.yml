name: 'Setup libsecp256k1'
description: 'Installs libsecp256k1'
inputs:
  ghc-version:
    description: Version of GHC to install
    default: ''

  cabal-version:
    description: Version of cabal to install
    default: ''

  pacman-packages:
    description: Pacman packages to install
    default: ''

outputs:
  cabal-store:
    description: "Prefix"
    value: ${{ steps.cabal-store.outputs.cabal-store }}

runs:
  using: "composite"
  steps:
    - name: Setup PKG_CONFIG_PATH
      shell: bash
      run: |
        if [ ${{ runner.os }} == "macOS" ]; then
          # OpenSSL is installed in a non-standard location in MacOS. See
          # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-11-Readme.md
          echo "PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/local/opt/openssl@1.1/lib/pkgconfig" | tee -a "$GITHUB_ENV"
        elif [ ${{ runner.os }} == "Linux" ]; then
          echo "PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/local/lib/pkgconfig" | tee -a "$GITHUB_ENV"
        fi

    - name: Setup LD_LIBRARY_PATH
      shell: bash
      run: |
        if [ ${{ runner.os }} != "Windows" ]; then
          # OpenSSL is installed in a non-standard location in MacOS. See
          # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-11-Readme.md
          echo "LD_LIBRARY_PATH=/usr/local/lib" | tee -a "$GITHUB_ENV"
        fi

    # For some unknown reason, the pacman setup must come before ghc installation.
    # It appears as if PATHEXT is set _after_ ghcup install ghc/cabal, and
    # as such we'd need pacman.exe instead.
    - name: "WIN: Install System Dependencies via pacman (msys2)"
      if: runner.os == 'Windows' && inputs.pacman-packages != ''
      shell: pwsh
      run: |
         # ghcup should be installed on current GHA Windows runners. Let's use ghcup to run
         # pacman, to install the necessary dependencies, ...
         ghcup run -- pacman --noconfirm -S ${{ inputs.pacman-packages }}

    - name: Setup GHC (Windows)
      if: inputs.ghc-version != '' && runner.os == 'Windows'
      shell: pwsh
      run: ghcup install ghc --set ${{ inputs.ghc-version }}

    - name: Setup GHC (Posix)
      if: inputs.ghc-version != ''
      shell: bash
      run: ghcup install ghc --set ${{ inputs.ghc-version }}

    - name: Setup cabal (Windows)
      if: inputs.cabal-version != '' && runner.os == 'Windows'
      shell: pwsh
      run: ghcup install cabal --set ${{ inputs.cabal-version }}

    - name: Setup cabal (Posix)
      if: inputs.cabal-version != ''
      shell: bash
      run: ghcup install cabal --set ${{ inputs.cabal-version }}

    - name: "WIN: fixup cabal config"
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # make sure cabal knows about msys64, and mingw64 tools. Not clear why C:/cabal/config is empty
        # and C:/cabal doesn't even exist.  The ghcup bootstrap file should have create it in the image:
        # See https://github.com/haskell/ghcup-hs/blob/787edc17af4907dbc51c85e25c490edd8d68b80b/scripts/bootstrap/bootstrap-haskell#L591
        # So we'll do it by hand here for now.
        #
        # We'll _not_ add extra-include-dirs, or extra-lib-dirs, and rely on what's shipped with GHC.
        # https://github.com/msys2/MINGW-packages/issues/10837#issuecomment-1047105402
        # https://gitlab.haskell.org/ghc/ghc/-/issues/21111
        # if we _do_ want them, this would be the lines to add below

        $ghcMingwDir = Join-Path -Path $(ghc --print-libdir) `
                                 -ChildPath ../mingw/x86_64-*-mingw32/lib/ `
                                 -Resolve

        cabal user-config -a "extra-prog-path: C:/msys64/mingw64/bin, C:/msys64/usr/bin" `
                          -a "extra-include-dirs: C:/msys64/mingw64/include" `
                          -a ("extra-lib-dirs: {0}, C:/msys64/mingw64/lib" -f $ghcMingwDir) `
                          -f init

    # Unify the computation of the cabal store directory to a single step. This makes referencing the cabal
    # store in later steps easier.
    #
    # We know on cabal store is located in the following locations by OS:
    #
    #   Linux: /home/runner/.cabal/store
    #   MacOS: /Users/runner/.cabal/store
    #   Windows: C:\cabal\store
    #
    # However, we compute these as best be can from information cabal provides in case this changes in the future.
    - name: "Setup cabal-store"
      id: cabal-store
      shell: bash
      run: |
        cabal help user-config
        cabal_config_file="$(cabal help user-config | grep -A 1 'You can edit the cabal configuration file to set defaults' | tail -n 1 | xargs)"

        if [[ '${{ runner.os }}' != 'Windows' ]]; then
          echo "cabal-store=$(dirname "$cabal_config_file")/store" | tee -a "$GITHUB_OUTPUT"
        else
          echo "cabal-store=C:\\cabal\\store" | tee -a "$GITHUB_OUTPUT"
        fi
